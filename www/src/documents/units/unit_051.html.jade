---cson
layout: 'deck_units' 
title: "Creating Your Own Exercises"
description: "In logic-ex, an exercise is a url. You can set exercises just by creating a list of urls."
tags: ['logic-ex', 'tutors']
---

include ../../../fragments/unit_mixins

//- 
  TODO: add further units on:
  * creating an ExerciseSet
  * grading students’ work and answering help requests
  * tracking students’ progress

+slide
  //- screenshots to use later (show then hide)
  .ex1.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
    img.bkg(src='/img/unit_051/151024-0012.png')
  .ex1-grade.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
    img.bkg(src='/img/unit_051/151024-0013.png')
  
  .main-bit
    .notes: :t
      In logic-ex, an exercise is a url. You can set exercises just by creating a list of urls.
    p An exercise is a url
    p.em-above To ask a question use ‘/ex/q/...’:
    ul
      li: a(href="https://logic-ex.butterfill.com/ex/q/define ‘logically valid’") /ex/q/define ‘logically valid’
    .notes: :t
      You can replace the text after ‘/q/’ with whatever question you want to ask.
      For this type of exercise, the student will be given a text box to fill in the answer.
    +hide_('.main-bit')
    +show('.ex1')
    .notes: :t
      Here’s what it looks like.
    +show_('.main-bit')
    +hide('.ex1')
    .notes: :t
      What if you want to grade this exercise?
    .slide.main-bit
      p To grade answers:
        ul
          li
            a(href="https://logic-ex.butterfill.com/ex/q/define ‘logically valid’/grade") /ex/q/define ‘logically valid’
              span.grade /grade
      +invert('.grade')
      .notes: :t
        Just add ‘/grade’ to the end of any url starting with ‘/ex/’ and you will see all the answers
        that students have submitted to you.
    +hide_('.main-bit')
    +show('.ex1-grade')
    .notes: :t
      Here you can mark the answer correct or incorrect and add a comment 
      if you like.
    .notes: :t
      After you grade one answer, anyone who gives a relevantly similar answer will 
      get the same grade and comment.
    .notes: :t
      Which students’ answers will you see here? 
      All those who currently specify the email you registered on logic-ex with as the 
      email of their tutor.
      So you would typically expect to whip through a lot of answers at once.
    +hide_('.ex1-grade')
    +show('.main-bit')
    .notes: :t
      Questions like this aren’t really interesting because the machine
      can’t do much to help you grading.
      Let’s look at other examples ...

+slide
  //- screenshots to use later (show then hide)
  .ex2.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
    img.bkg(src='/img/unit_051/151025-0001.png')

  .main-bit
    p An exercise is a url
    p.em-above To set a proof use ‘/ex/proof/from/...|...|.../to/...’:
    ul
      li: a(href="https://logic-ex.butterfill.com/ex/proof/from/exists x all y Loves(x,y)/to/∀y ∃x Loves(x,y)") /ex/proof/from/exists x all y Loves(x,y)/to/∀y ∃x Loves(x,y)
    .notes: :t
      How about asking students to write proofs?
      In logic-ex, an exercise is a url. 
      The url for a proof starts ‘/ex/proof’
      Then you add ‘/from/ [premise] | [premise] | ... | [premise]’ for the premises
      and ‘/to/ [conclusion]’ for the conclusion.
    .notes: :t
      The premises and conclusion need to be sentences of awFOL.
      You can write these using symbols (‘∀y ∃x Loves(x,y)’)
      but you don’t have to.
      It’s usually quicker to write in words (‘exists x all y Loves(x,y)’).
    .notes: :t
      Regardless of how you use words or symbols, and of how you use brackets, 
      the sentences will be represented in a canonical way.
    +hide_('.main-bit')
    +show('.ex2')
    .notes: :t
      Proofs will be automatically graded.  
    .notes: :t
      As with all exercises, you can see what your students wrote
      by adding ‘/grade’ to the url.  This allows you to add comments
      and suggestions when the student doesn’t succeed.
    +show_('.main-bit')
    +hide('.ex2')
    .slide
      p.notes.show Separate multiple premises with |
      ul
        li: a(href="https://logic-ex.butterfill.com/ex/proof/from/A arrow B|A/to/B") /ex/proof/from/A arrow B|A/to/B
      

+slide
  //- screenshots to use later (show then hide)
  .ex3.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
    img.bkg(src='/img/unit_051/151025-0002.png')

  .main-bit
    p An exercise is a url
    p.em-above To require a counterexample use ‘/ex/create/from/.../to/...’:
    ul
      li: a(href="https://logic-ex.butterfill.com/ex/create/from/exists x Tall(x) and exists x Happy(x)/to/∃x (Tall(x) ∧ Happy(x))") /ex/create/from/exists x Tall(x) and exists x Happy(x)/to/∃x (Tall(x) ∧ Happy(x))
    .notes: :t
      As with proofs, 
      the premises and conclusion need to be sentences of awFOL.
      You can write these using symbols but you don’t have to.
    .notes: :t
      As with proofs, multiple premises may be separated by |
    .notes: :t
      Note that logic-ex treats exercises as identical exactly if their urls are identical.
      So whether you use words or symbols doesn’t affect what your students see, but
      changing a symbol to a word will cause logic-ex to treat the url as a different exercise.
    +hide_('.main-bit')
    +show('.ex3')
    .notes: :t
      Counterexamples will be automatically graded.  

+slide_middle
  p.center variation
  
  
+slide
  .ex4.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
    img.bkg(src='/img/unit_051/151025-0007.png')
    .ex4b.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
      img.bkg(src='/img/unit_051/151025-0008.png')
  .ex5.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
    img.bkg(src='/img/unit_051/151025-0004.png')
    .ex5b.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
      img.bkg(src='/img/unit_051/151025-0005.png')
    .ex5c.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
      img.bkg(src='/img/unit_051/151025-0006.png')
  
  .main-bit
    p Avoid revealing whether an argument is valid.
    p Use ‘/ex/create/orValid/...’
    ul
      li: a(href="https://logic-ex.butterfill.com/ex/create/orValid/from/exists x Tall(x) and exists x Happy(x)/to/∃x (Tall(x) ∧ Happy(x))") /ex/create/
        span.orValid orValid
        span /from/exists x Tall(x) and exists x Happy(x)/to/∃x (Tall(x) ∧ Happy(x))
    .notes: :t
      Using ‘/ex/create/orValid’ means that students can duck giving a counterexample by saying that 
      the argument is not valid.
    +invert('.orValid')
    +hide_('.main-bit')
    +show('.ex4')
    .notes: :t
      Logic-ex will still grade counterexamples automatically, but you have to tell it whether 
      or not the argument is valid by grading an submitted exercise which says that the 
      argument is valid.
    +show('.ex4b')
    
    +show_('.main-bit')
    +hide('.ex4')
    .slide.main-bit
      p For proofs,
      p Use ‘/ex/proof/orInvalid/...’
      ul
        li: a(href="https://logic-ex.butterfill.com/ex/proof/orInvalid/from/A arrow B|A/to/B") /ex/proof/
          span.orInvalid orInvalid
          span /from/A arrow B|A/to/B
      +invert('.orInvalid')
    +hide_('.main-bit')
    +show('.ex5')
    +show('.ex5b')
    +show('.ex5c')

+slide_middle
  p.center make n sentences true


+slide
  p To require a possible situation in which one or more sentences are true
  p use ‘/ex/create/qq/...’
  ul
    li: a(href="https://logic-ex.butterfill.com/ex/create/qq/not%20White(a)%7CHappy(a)%7CSad(b)%7CLeftOf(b%2Ca)%7CTallerThan(a%2Cb)%7CSameSize(a%2Cb)") /ex/create/qq/not White(a)|Happy(a)|Sad(b)|LeftOf(b,a)|TallerThan(a,b)|SameSize(a,b)
  .notes: :t
    This works in much the way that counterexamples work.
    Exercises are automatically graded.
  .slide
    p.em-above To avoid revealling whether the sentences are consistent
    p use ‘/ex/create/qq/
      span.orInconsistent orInconsistent
      span /...’
    +invert('.orInconsistent')



+slide_middle
  p.center truth tables

+slide
  //- screenshots to use later (show then hide)
  .ex6.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
    img.bkg(src='/img/unit_051/151025-0009.png')
  .ex7.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
    img.bkg(src='/img/unit_051/151025-0011.png')

  .main-bit.step1
    p An exercise is a url
    p.em-above To require truthtables for sentences use ‘/ex/tt/qq/...’:
    ul
      li: a(href="https://logic-ex.butterfill.com/ex/tt/qq/B%20and%20not%20A%7C(A∨B)∧¬(B∧¬A)") /ex/tt/qq/B and not A|(A∨B)∧¬(B∧¬A)
    .notes: :t
    .notes: :t
      As with proofs, multiple premises may be separated by |
    .notes: :t
      Note that logic-ex treats exercises as identical exactly if their urls are identical.
      So whether you use words or symbols doesn’t affect what your students see, but
      changing a symbol to a word will cause logic-ex to treat the url as a different exercise.
    +hide_('.main-bit')
    +show('.ex6')
    .notes: :t
      Truth tables will be automatically graded.  
    .notes: :t
      Note that, in addition to the truth tables, there are standard questions.
      The exact questions depends on whether there are 1 or 2 sentences for 
      which truth tables are required.
      (There are no quesitons when truth tables for 3 or more sentences are required.)
    +show_('.main-bit')
    +hide('.ex6')
    .slide.main-bit.step2
      p To ask for just the truth table (no questions)
      p use ‘/ex/tt/noQ/...’
      ul
        li: a(href="https://logic-ex.butterfill.com/ex/tt/noQ/qq/B%20and%20not%20A%7C(A∨B)∧¬(B∧¬A)") /ex/tt/
          span.noQ noQ
          span /qq/B and not A|(A∨B)∧¬(B∧¬A)
      +invert('.noQ')
  +blur2_('.step1, .step2')
  .slide.main-bit
    p.em-above To ask for truth tables for an argument
    p use ‘/ex/tt/from/.../to/...’
    ul
      li: a(href="https://logic-ex.butterfill.com/ex/tt/from/A%20and%20B%7CB%20and%20C/to/A%20and%20C") /ex/tt/from/A and B|B and C/to/A and C
  +hide_('.main-bit')
  +show('.ex7')
      


+slide_middle
  p.center translation to and from awFOL
  
+slide
  .ex8.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
    img.bkg(src='/img/unit_051/151025-0012.png')
  
  .main-bit
    p To require a translation
    p use ‘/ex/trans/domain/.../names/.../predicates/.../sentence/...’
        ul
          li: a(href="https://logic-ex.butterfill.com/ex/trans/domain/Ayesha%7CBeatrice%7CCaitlyn/names/a%3DAyesha%7Cb%3DBeatrice%7Cc%3DCaitlyn/predicates/Happy1/sentence/(Happy(a)%20and%20Happy(b))%20or%20Happy(c)") /ex/trans/domain/Ayesha|Beatrice|Caitlyn/names/a=Ayesha|b=Beatrice|c=Caitlyn/predicates/Happy1/sentence/(Happy(a) and Happy(b)) or Happy(c)
  +hide_('.main-bit')
  +show('.ex8')
  .notes: :t
    Translations into awFOL are not automatically graded, but once you grade one, the answer is 
    converted to PNF, ordered and simplified.  Any matching answer will receive 
    the same grade and comments.
  +show_('.main-bit')
  +hide('.ex8')
  .notes: :t
    Let me explain the components of the url for translations
  .slide.domain
    p /domain/Ayesha|Beatrice
    p OR: /domain/3things
  .notes: :t
    There are two ways you can specify the domain; either list the things you want,
    or just specify the number of things you want to be in it.
  +blur2_('.domain')
  .slide.names
    p /names/a=Ayesha|b=Beatrice|...
    p OR: /names/-/ [for no names]
  .notes: :t
    Specify names for domain objects, separating them with ‘|’.
    If you don’t want any names, use ‘/names/-/’
  +blur2_('.names')
  .slide.predicates
    p /predicates/Happy1|LeftOf2|...
    p OR: /predicates/Happy1-x-is-happy|Musician1-x-is-a-musician|...
  .notes: :t
    The second, longer format for predicates allows you to specify the 
    interpretation (otherwise it will be automatically generated in a crude way).
  +blur2_('.predicates')
  .slide
    p /sentence/exists x Happy(x)
    p OR: /sentence/Someone is happy
  .notes: :t
    When your sentence can be parsed as an expression of awFOL,
    logic-ex will expect a natural language answer; otherwise it will
    expect the answer to be a sentence of awFOL and anything which is not
    a sentence of awFOL will automatically be graded as incorrect.
  
  
+slide_middle
  p.center true or false questions

+slide
  .ex.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
    img.bkg(src='/img/unit_051/151025-0014.png')
  .ex2.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
    img.bkg(src='/img/unit_051/151025-0015.png')
  .ex3.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
    img.bkg(src='/img/unit_051/151025-0016.png')
  .ex4.hide(style='position: absolute; top:0; left:0; width:100%; height:100%;')
    img.bkg(src='/img/unit_051/151025-0017.png')
  
  .main-bit
    p Set questions about combinations of arguments, truth table rows and pictorially represented possible situations.
    p e.g.
    ul
      li: a(href="https://logic-ex.butterfill.com/ex/TorF/from/not%20A%7CA%20arrow%20B/to/not%20B/TTrow/A%3AF%7CB%3AF/qq/not%20A%7CA%20arrow%20B%7Cnot%20B%7Cthe%20possible%20situation%20is%20a%20counterexample%20to%20the%20argument") /ex/TorF/from/not A|A arrow B/to/not B/TTrow/A:F|B:F/qq/not A|A arrow B|not B|the possible situation is a counterexample to the argument
  +hide_('.main-bit')
  +show('.ex')
  .notes: :t
    The questions will be marked automatically if they are either sentences of awFOL 
    that can be evaluated in the row specified, and also if are probably asking 
    about whether the row is a counterexample to the argument.
  .notes: :t
    You can write any sentences you like (whether English or awFOL); if the sentences
    are English, you’ll have to grade answers yourself.
  .notes: :t
    But once you have graded one answer as correct, all future submitted answers will be automatically
    graded as correct or incorrect.
  +show('.ex2')
  .notes: :t
    This is an example with a possible situation and no argument.
  .notes: :t
    The url is:
    /ex/TorF/from/Happy(a) or Happy(b)|Happy(a)/to/not Happy(b)/world/[{"x":9,"y":0,"w":2,"h":2,"n":"a","c":"white","f":["}:","^","D"]},{"x":0,"y":0,"w":2,"h":2,"n":"b","c":"pink","f":[":'","-","D"]},{"x":4,"y":0,"w":2,"h":2,"n":"","c":"purple","f":[":'","-","("]}]/qq/Happy(a) or Happy(b)|Happy(a)|not Happy(b)|The possible situation is a counterexample to the argument
  .notes: :t
    The code for specifying the world (‘[{"x":9,"y":0, ...’) can be generated by
    creating a possible situation graphically (use any /ex/create/... exercise) and then 
    executing `JSON.stringify(ix.getAnswer().world)` in the web console.
  .notes: :t
    Sometimes the code for creating a possible situation isn’t valid in a url (it 
    depends on the situation).  In that case, use the command
    `encodeURIComponent(JSON.stringify(ix.getAnswer().world))`.
    (This will give you a longer string.  You don’t need to do this if you
    are creating an ExerciseSet in logic-ex rather than writing your own page of urls.)
  +show('.ex3')
  .notes: :t
    Here you have just a set of one or more questions (no argument or possible situation).
  +show('.ex4')
  .notes: :t
    This is an exercise with questions about an argument.
    Other variation: a possible situation and an argument.
    
    
+slide_middle
  p.center more examples
  p.center 
    a(href="https://logic-ex.butterfill.com/course/UK_W20_PH126/exerciseSet/normal-normal") /course/UK_W20_PH126/exerciseSet/normal-normal
  .slide
    p.em-above.center more types?
    .notes: :t
      It’s not difficult to add new types of exercise.
      Ask me if there’s something you need (no promises),
      or contribute the code yourself.
    .notes: :t
      If you know some code you could also contribute enhancements to the 
      core of logic-ex (which is fairly modular).
      The core of logic-ex is the expression and proof parsers,
      the specification for expressing rules of proof, and the proof checker.
      (This is all maintained separately from the web interface and the 
      bits for tracking students’ progress.) 
