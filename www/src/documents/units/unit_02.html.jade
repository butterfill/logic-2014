---cson
layout: 'deck_units' 
title: "Quick Intro to FOL"
description: "Gives some examples of the formal language FOL and explains their relation to ordinary English.  Also explains terms like 'name' and 'predicate'."
tags: ['definitions']
depends: []
source: ['ph126 lecture 01', 'ppe lecture 01']
sequence: 40
book: ['1.1','1.2','1.3']
exercises: ['1.1--1.5', '*1.6', '1.8--1.10']
exercises_fast: []
---

include ../../../fragments/unit_mixins

+slide({bkg:'unit_02/slide-004.jpeg'})
  .notes Our approach to studying logic will involve a formal language called FOL.
  .notes In order to get a sense for this language, let's compare it to English.

+slide({bkg:'unit_02/slide-005.jpeg'})
  .notes In English there are names ...

+slide({bkg:'unit_02/slide-006.jpeg'})
  .notes ... these are terms that function to refer to objects.

+slide({bkg:'unit_02/slide-007.jpeg'})
  .notes There are also predicates like 'Square'.

+slide({bkg:'unit_02/slide-008.jpeg'})
  .notes Predicates are things that refer to properties.

+slide({bkg:'unit_02/slide-009.jpeg'})
  .notes Some properties are relations like 'to the left of'.  The names and expressions for these are also called predictaes.
  .notes: :t()
     (This isn't clear enough: it's making two points at once, that predicates can be expressions, not just words, and that some 
     predicates have multiple argument places; and it also calls a predicate a relation.)

+slide({bkg:'unit_02/slide-010.jpeg'})
  .notes Consider the word 'or' in this sentence.  It isn't a name or a predicate.  It doesn't refer to an object, nor to a property.

+slide({bkg:'unit_02/slide-011.jpeg'})
  .notes Instead its function is to join two sentences, making a new one.  We'll call things like this 'connectives'.

+slide({bkg:'unit_02/slide-012.jpeg'})
  .notes Here's another piece of terminology: a sentence with no connectives is 'atomic'; a sentence with one or more connectives is 'non-atomic'

+slide({bkg:'unit_02/slide-013.jpeg'})
  .notes Now let's see how these sentences look in our formal language, FOL.
  .notes Here's how the equivalent of 'John is square' looks.

+slide({bkg:'unit_02/slide-014.jpeg'})
  .notes The whole thing is a sentence of FOL.

+slide({bkg:'unit_02/slide-015.jpeg'})
  .notes The letter 'a' is a name; just like the English name 'John', the function of 'a' is to refer to an object (in this case, John)

+slide({bkg:'unit_02/slide-016.jpeg'})
  .img.handout(data-src='img/name_predicate_sentence.png')
  .notes And 'Square( )' is the predicate.

+slide({bkg:'unit_02/slide-017.jpeg'})
  .notes Here's the equivalent of 'John is to the left of Ayesha in FOL'

+slide({bkg:'unit_02/slide-018.jpeg'})
  .notes And here's the equivalent of the third sentence.

+slide({bkg:'unit_02/slide-019.jpeg'})
  .notes Note that where the English 'or' appears, we use a special symbol.  This symbol doesn't do exactly what the English 'or' does, as we'll see later.

+slide({bkg:'unit_02/slide-020.jpeg'})
  .notes Alles klar?  Molto bene.

+slide({bkg:'unit_02/slide-021.jpeg'})
  .notes You might be thinking that this English sentence looks, well, ...

+slide({bkg:'unit_02/slide-022.jpeg'})
  .notes ... a lot like this FOL sentence.  What's the point of learning a formal language?  How will it help us to understand logic?
  .notes (It's a bit tricky to answer this question as I haven't yet said what logic is.)

+slide_middle
  .handout A formal langauge enables us to avoid ambiguity, e.g.:
  .notes We need a formal language because ambiguity is awkward to deal with theoretically
  .handout \begin{quote}
  p.center.handout.show This is a hospital where doctors are trained.
  .handout \end{quote}

+slide_middle
  .handout A formal langauge also enables us to some avoid appearance--reality problems:
  .notes Appearance and reality. We need a formal language because we want a guarantee that a sentence which seems to express a proposition really does express a proposition.
  .handout \begin{quote}
  p.center.handout.show Many more people have been to Paris than I have.
  .handout \end{quote}

//- doesn't know jack
+slide_middle
  .notes Finally, consider these sentences.  
  p Ayesha does
    span.neg n't 
    span  know diddly squat about logic
  p Ayesha does know diddly squat about logic
  +invert('.neg')
  .notes: :t()
     The only difference is an extra negation in the first sentence.
     Normally you might think that adding a negation changes the meaning, and does so systematically.
     But this is not true of natural languages like English.
     We can construct our formal language so that it is true, thereby making our lives simpler 
     insofar as we are interested in reflecting on inferential relations among sentences.
