{
  "courseName": "UK_W20_PH126",
  "variant": "fast-fast",
  "description": "These exercises are aimed at students with a qualification equivalent to further maths at A-Level. They are linked to the ‘fast’ lectures.",
  "lectures": [
    {
      "type": "lecture",
      "name": "Fast Lecture 01",
      "slides": "http://logic-1.butterfill.com/fastlecture_01.html",
      "handout": "http://logic-1.butterfill.com/handouts/fastlecture_01.handout.pdf",
      "units": [
        {
          "type": "unit",
          "name": "Terminology",
          "slides": "http://logic-1.butterfill.com/units/unit_029.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/q/define ‘logically valid argument’",
            "/ex/TorF/qq/in the sentence ‘John is square or Ayesha is triangular’, the word ‘John’ is a name|in the same sentence, ‘square’ is a predicate|in the same sentence, ‘square’ is a connective|in the same sentence, ‘or’ is a predicate|in the same sentence, ‘or’ is a connective"
          ]
        },
        {
          "type": "unit",
          "name": "Logically Valid Arguments",
          "slides": "http://logic-1.butterfill.com/units/unit_03.html",
          "rawReading": [
            "2.1"
          ],
          "rawExercises": [
            "/ex/TorF/from/Ayesha is a fish|Beatrice is not a fish/to/Ayesha isn’t Beatrice/qq/The argument is logically valid",
            "/ex/TorF/from/Most fish swim|Ayesha is a fish/to/Ayesha swims/qq/The argument is logically valid",
            "/ex/TorF/from/If Beatrice is a fish, she can swim|Beatrice is a fish/to/Beatrice can swim/qq/The argument is logically valid",
            "/ex/TorF/from/If Ayesha is a bird, she can fly|Ayesha can fly/to/Ayesha is a bird/qq/The argument is logically valid",
            "/ex/TorF/from/Ayesha can fly|Beatrice can swim/to/Ayesha isn’t Beatrice/qq/The argument is logically valid",
            "/ex/TorF/from/Ayesha is a big squirrel|All squirrels are animals/to/Ayesha is a big animal/qq/The argument is logically valid",
            "/ex/TorF/qq/a logically valid argument can have true premises and a true conclusion|a logically valid argument can have true premises and a false conclusion|a logically valid argument can have false premises and a true conclusion|a logically valid argument can have false premises and a false conclusion"
          ]
        },
        {
          "type": "unit",
          "name": "Counterexamples",
          "slides": "http://logic-1.butterfill.com/units/unit_04.html",
          "rawReading": [
            "2.5"
          ],
          "rawExercises": [
            "/ex/create/from/TallerThan(a,b)/to/WiderThan(a,b)",
            "/ex/create/from/Adjacent(a,b)|Adjacent(b,c)/to/Adjacent(a,c)",
            "/ex/create/from/SameShape(a,b)/to/SameSize(a,b)",
            "/ex/create/from/SameSize(a,b)/to/SameShape(a,b)",
            "/ex/TorF/from/Happy(a) or Happy(b)|Happy(a)/to/not Happy(b)/world/[{\"x\":9,\"y\":0,\"w\":2,\"h\":2,\"n\":\"a\",\"c\":\"white\",\"f\":[\"}:\",\"^\",\"D\"]},{\"x\":0,\"y\":0,\"w\":2,\"h\":2,\"n\":\"b\",\"c\":\"pink\",\"f\":[\":'\",\"-\",\"D\"]},{\"x\":4,\"y\":0,\"w\":2,\"h\":2,\"n\":\"\",\"c\":\"purple\",\"f\":[\":'\",\"-\",\"(\"]}]/qq/Happy(a) or Happy(b)|Happy(a)|not Happy(b)|The possible situation is a counterexample to the argument",
            "/ex/TorF/from/Happy(a)/to/not Happy(b)/world/[{\"x\":3,\"y\":0,\"w\":3,\"h\":3,\"n\":\"a\",\"c\":\"white\",\"f\":[\":\",\"-\",\")\"]},{\"x\":7,\"y\":0,\"w\":2,\"h\":2,\"n\":\"b\",\"c\":\"red\",\"f\":[\":'\",\">\",\"(\"]}]/qq/Happy(a)|not Happy(b)|The possible situation is a counterexample to the argument",
            "/ex/TorF/from/LargerThan(a,b)/to/not SameShape(a,b)/world/[{\"x\":3,\"y\":0,\"w\":3,\"h\":3,\"n\":\"a\",\"c\":\"white\",\"f\":[\":\",\"-\",\")\"]},{\"x\":7,\"y\":0,\"w\":2,\"h\":2,\"n\":\"b\",\"c\":\"red\",\"f\":[\":'\",\">\",\"(\"]}]/qq/LargerThan(a,b)|not SameShape(a,b)|The possible situation is a counterexample to the argument",
            "/ex/q/define ‘counterexample’",
            "/ex/create/from/LeftOf(a,b)|RightOf(b,c)/to/LeftOf(a,c)",
            "/ex/create/from/LeftOf(a,b)|Adjacent(b,c)/to/LeftOf(a,c)",
            "/ex/create/orValid/from/LeftOf(a,b)|LeftOf(b,c)/to/LeftOf(a,c)",
            "/ex/create/orValid/from/SameSize(a,b)|SameShape(b,c)/to/SameSize(a,c)",
            "/ex/create/orValid/from/not LeftOf(a,b)|not LeftOf(b,a)/to/a=b"
          ]
        },
        {
          "type": "unit",
          "name": "Identity",
          "slides": "http://logic-1.butterfill.com/units/unit_06.html",
          "rawReading": [
            "2.2"
          ],
          "rawExercises": [
            "/ex/create/orValid/from/LeftOf(a,b)|b=c/to/LeftOf(a,c)",
            "/ex/create/orValid/from/a=b/to/not SameSize(a,b)",
            "/ex/create/orValid/from/not SameShape(a,b)/to/a=b",
            "/ex/create/orValid/from/a=b|b=c/to/a=c",
            "/ex/create/orValid/from/SameSize(a,b)|SameShape(a,b)/to/a=b"
          ]
        },
        {
          "type": "unit",
          "name": "Truth Tables",
          "slides": "http://logic-1.butterfill.com/units/unit_071.html",
          "rawReading": [
            "3.1",
            "3.2",
            "3.3"
          ],
          "rawExercises": [
            "/ex/tt/qq/A or B",
            "/ex/TorF/world/[{\"x\":9,\"y\":0,\"w\":2,\"h\":2,\"n\":\"a\",\"c\":\"white\",\"f\":[\"}:\",\"^\",\"D\"]},{\"x\":0,\"y\":0,\"w\":2,\"h\":2,\"n\":\"b\",\"c\":\"pink\",\"f\":[\":'\",\"-\",\"D\"]},{\"x\":4,\"y\":0,\"w\":2,\"h\":2,\"n\":\"\",\"c\":\"purple\",\"f\":[\":'\",\"-\",\"(\"]}]/qq/Happy(a)|not Happy(b)|not not Happy(a)|not not not Happy(a)|not not not not Happy(a)",
            "/ex/create/qq/Laughing(c)|Frowning(d)",
            "/ex/TorF/world/[{\"x\":4,\"y\":0,\"w\":2,\"h\":2,\"n\":\"c\",\"c\":\"cyan\",\"f\":[\":\",\">\",\"D\"]},{\"x\":7,\"y\":0,\"w\":2,\"h\":2,\"n\":\"d\",\"c\":\"orange\",\"f\":[\"}:\",\"-\",\"|\"]}]/qq/Laughing(c)|Frowning(d)|Laughing(c) and Frowning(d)|Laughing(c) or Frowning(d)",
            "/ex/TorF/world/[{\"x\":4,\"y\":0,\"w\":2,\"h\":2,\"n\":\"c\",\"c\":\"cyan\",\"f\":[\":\",\">\",\"D\"]},{\"x\":7,\"y\":0,\"w\":2,\"h\":2,\"n\":\"d\",\"c\":\"orange\",\"f\":[\"}:\",\"-\",\"|\"]}]/qq/Frowning(d)|not Frowning(d)|Laughing(c) and not Frowning(d)|not (Laughing(c) and not Frowning(d))"
          ]
        },
        {
          "type": "unit",
          "name": "Complex Truth Tables",
          "slides": "http://logic-1.butterfill.com/units/unit_09.html",
          "rawReading": [
            "3.3",
            "3.5"
          ],
          "rawExercises": [
            "/ex/tt/qq/(A and B) or C",
            "/ex/tt/qq/A and (B or C)",
            "/ex/create/from/(Happy(a) and Happy(b)) or Happy(c)/to/Happy(a) and (Happy(b) or Happy(c))",
            "/ex/tt/qq/A|not not A",
            "/ex/tt/qq/not (A or B)|not A and not B",
            "/ex/tt/qq/not (A and not B)|not A or B",
            "/ex/tt/qq/not (not A and B)|(A and not B)"
          ]
        },
        {
          "type": "unit",
          "name": "Logical Validity and Truth Tables",
          "slides": "http://logic-1.butterfill.com/units/unit_14.html",
          "rawReading": [
            "4.3"
          ],
          "rawExercises": [
            "/ex/tt/from/A or B|not A/to/B",
            "/ex/tt/from/not (A or B)/to/not A",
            "/ex/tt/from/not (A and B)/to/not A"
          ]
        },
        {
          "type": "unit",
          "name": "Contradictions, Logical Truths and Logical Possibilities",
          "slides": "http://logic-1.butterfill.com/units/unit_160.html",
          "rawReading": [
            "4.1",
            "4.2"
          ],
          "rawExercises": [
            "/ex/tt/qq/A or not A",
            "/ex/tt/qq/(A and B) and not A",
            "/ex/tt/qq/(A or not B) and not (A or not A)"
          ]
        },
        {
          "type": "unit",
          "name": "The Storm Clouds on the Horizon Were Getting Nearly Directly Overhead",
          "slides": "http://logic-1.butterfill.com/units/unit_162.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/TorF/from/The storm clouds on the horizon were getting nearly directly overhead/to/those who enter the country illegally violate the law/qq/the argument is valid|the argument is sound",
            "/ex/TorF/qq/If there’s no possible situation in which the premises of an argument are all true, it must be logically valid|If there’s no possible situation in which the premises of an argument are all true, it cannot be logically valid|If there is no possible situation in which the conclusion of an argument is false, it must be logically valid|If there is no possible situation in which the conclusion of an argument is false, it cannot be logically valid|If there’s no possible situation in which the premises of an argument are all false, it must be logically valid|If there’s no possible situation in which the premises of an argument are all false, it cannot be logically valid"
          ]
        }
      ]
    },
    {
      "type": "lecture",
      "name": "Fast Lecture 02",
      "slides": "http://logic-1.butterfill.com/fastlecture_02.html",
      "handout": "http://logic-1.butterfill.com/handouts/fastlecture_02.handout.pdf",
      "units": [
        {
          "type": "unit",
          "name": "Formal Proof: ∧Elim and ∧Intro",
          "slides": "http://logic-1.butterfill.com/units/unit_21.html",
          "rawReading": [
            "5.1",
            "6.1"
          ],
          "rawExercises": [
            "/ex/proof/from/Happy(a) and Sad(b)|Sad(b) and Confused(c)/to/Happy(a) and Confused(c)"
          ]
        },
        {
          "type": "unit",
          "name": "Rules of Proof for Identity",
          "slides": "http://logic-1.butterfill.com/units/unit_110.html",
          "rawReading": [
            "2.2"
          ],
          "rawExercises": [
            "/ex/proof/from/Happy(a)|a=b/to/Happy(b)",
            "/ex/proof/from/LeftOf(a,b)|Happy(b)|a=b/to/LeftOf(b,a) and Happy(a)"
          ]
        }
      ]
    },
    {
      "type": "lecture",
      "name": "Fast Lecture 03",
      "slides": "http://logic-1.butterfill.com/fastlecture_03.html",
      "handout": "http://logic-1.butterfill.com/handouts/fastlecture_03.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Fast Lecture 04",
      "slides": "http://logic-1.butterfill.com/fastlecture_04.html",
      "handout": "http://logic-1.butterfill.com/handouts/fastlecture_04.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Fast Lecture 05",
      "slides": "http://logic-1.butterfill.com/fastlecture_05.html",
      "handout": "http://logic-1.butterfill.com/handouts/fastlecture_05.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Fast Lecture 06",
      "slides": "http://logic-1.butterfill.com/fastlecture_06.html",
      "handout": "http://logic-1.butterfill.com/handouts/fastlecture_06.handout.pdf",
      "units": [
        {
          "type": "unit",
          "name": "There Does Not Exist",
          "slides": "http://logic-1.butterfill.com/units/unit_605.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/trans/domain/people/names/-/predicates/Happy1|Crying1/sentence/Someone is happy and crying",
            "/ex/trans/domain/people/names/-/predicates/Happy1|Crying1/sentence/Someone is neither happy nor crying",
            "/ex/trans/domain/people/names/-/predicates/Happy1/sentence/Someone is not happy",
            "/ex/trans/domain/people/names/-/predicates/Happy1/sentence/No one is happy",
            "/ex/trans/domain/things/names/-/predicates/Broken1/sentence/Everything is not broken",
            "/ex/trans/domain/things/names/-/predicates/Broken1/sentence/Not everything is broken",
            "/ex/trans/domain/things/names/-/predicates/Broken1|Red1/sentence/Not everything red is broken",
            "/ex/trans/domain/things/names/-/predicates/Broken1|Red1/sentence/Everything red is not broken",
            "/ex/proof/orInvalid/from/not exists x Dead(x)/to/exists x not Dead(x)",
            "/ex/proof/orInvalid/from/exists x not Dead(x)/to/not exists x Dead(x)",
            "/ex/create/orValid/from/not exists x Happy(x)/to/exists x not Happy(x)",
            "/ex/create/orValid/from/exists x not Happy(x)/to/not exists x Happy(x)"
          ]
        },
        {
          "type": "unit",
          "name": "↔ : truth tables and rules",
          "slides": "http://logic-1.butterfill.com/units/unit_567.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/tt/qq/(A arrow B) ↔ not (A and not B)",
            "/ex/proof/from/A arrow B|B arrow A/to/A ↔ B",
            "/ex/proof/from/(not A or B) and (A or not B)/to/A ↔ B"
          ]
        }
      ]
    },
    {
      "type": "lecture",
      "name": "Fast Lecture 07",
      "slides": "http://logic-1.butterfill.com/fastlecture_07.html",
      "handout": "http://logic-1.butterfill.com/handouts/fastlecture_07.handout.pdf",
      "units": []
    }
  ]
}
