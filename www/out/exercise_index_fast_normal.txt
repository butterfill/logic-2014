{
  "courseName": "UK_W20_PH126",
  "variant": "fast-normal",
  "description": "These exercises are aimed at students who want to do plenty of standard exercises.  They are linked to the ‘fast’ lectures.",
  "lectures": [
    {
      "type": "lecture",
      "name": "Fast Lecture 01",
      "slides": "http://logic-1.butterfill.com/fastlecture_01.html",
      "handout": "http://logic-1.butterfill.com/handouts/fastlecture_01.handout.pdf",
      "units": [
        {
          "type": "unit",
          "name": "Terminology",
          "slides": "http://logic-1.butterfill.com/units/unit_029.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/q/define ‘logically valid argument’",
            "/ex/TorF/from/Either the pig went up the left fork or it went up the right fork|The pig didn’t go up the left fork/to/The pig went up the right fork/qq/The argument is logically valid",
            "/ex/TorF/from/A or B|not A/to/B/qq/The argument is logically valid",
            "/ex/TorF/from/The pig didn’t go up the left fork/to/The pig went up the right fork/qq/The argument is logically valid",
            "/ex/TorF/from/not A/to/B/qq/The argument is logically valid",
            "/ex/TorF/qq/in the sentence ‘John is square or Ayesha is triangular’, the word ‘John’ is a name|in the same sentence, ‘square’ is a predicate|in the same sentence, ‘square’ is a connective|in the same sentence, ‘or’ is a predicate|in the same sentence, ‘or’ is a connective"
          ]
        },
        {
          "type": "unit",
          "name": "Logically Valid Arguments",
          "slides": "http://logic-1.butterfill.com/units/unit_03.html",
          "rawReading": [
            "2.1"
          ],
          "rawExercises": [
            "/ex/TorF/qq/a logically valid argument cannot have a false conclusion|a logically valid argument cannot have false premises",
            "/ex/TorF/from/Ayesha is a fish|Ayesha cannot swim/to/Ayesha is a fish who cannot swim/qq/The argument is logically valid",
            "/ex/TorF/from/Ayesha is a fish|Beatrice is not a fish/to/Ayesha isn’t Beatrice/qq/The argument is logically valid",
            "/ex/TorF/from/Most fish swim|Ayesha is a fish/to/Ayesha swims/qq/The argument is logically valid",
            "/ex/TorF/from/All fish swim|Ayesha is a fish/to/Ayesha swims/qq/The argument is logically valid",
            "/ex/TorF/from/If Beatrice is a fish, she can swim|Beatrice is a fish/to/Beatrice can swim/qq/The argument is logically valid",
            "/ex/TorF/from/If Ayesha is a bird, she can fly|Ayesha can fly/to/Ayesha is a bird/qq/The argument is logically valid",
            "/ex/TorF/from/Ayesha can fly|Beatrice can swim/to/Ayesha isn’t Beatrice/qq/The argument is logically valid",
            "/ex/TorF/from/Ayesha is a big squirrel|All squirrels are animals/to/Ayesha is a big animal/qq/The argument is logically valid",
            "/ex/TorF/qq/a logically valid argument can have true premises and a true conclusion|a logically valid argument can have true premises and a false conclusion|a logically valid argument can have false premises and a true conclusion|a logically valid argument can have false premises and a false conclusion"
          ]
        },
        {
          "type": "unit",
          "name": "Counterexamples",
          "slides": "http://logic-1.butterfill.com/units/unit_04.html",
          "rawReading": [
            "2.5"
          ],
          "rawExercises": [
            "/ex/create/from/TallerThan(a,b)/to/WiderThan(a,b)",
            "/ex/create/from/Adjacent(a,b)|Adjacent(b,c)/to/Adjacent(a,c)",
            "/ex/create/from/SameShape(a,b)/to/SameSize(a,b)",
            "/ex/create/from/SameSize(a,b)/to/SameShape(a,b)",
            "/ex/TorF/from/Happy(a) or Happy(b)|Happy(a)/to/not Happy(b)/world/[{\"x\":9,\"y\":0,\"w\":2,\"h\":2,\"n\":\"a\",\"c\":\"white\",\"f\":[\"}:\",\"^\",\"D\"]},{\"x\":0,\"y\":0,\"w\":2,\"h\":2,\"n\":\"b\",\"c\":\"pink\",\"f\":[\":'\",\"-\",\"D\"]},{\"x\":4,\"y\":0,\"w\":2,\"h\":2,\"n\":\"\",\"c\":\"purple\",\"f\":[\":'\",\"-\",\"(\"]}]/qq/Happy(a) or Happy(b)|Happy(a)|not Happy(b)|The possible situation is a counterexample to the argument",
            "/ex/TorF/from/Happy(a)/to/not Happy(b)/world/[{\"x\":3,\"y\":0,\"w\":3,\"h\":3,\"n\":\"a\",\"c\":\"white\",\"f\":[\":\",\"-\",\")\"]},{\"x\":7,\"y\":0,\"w\":2,\"h\":2,\"n\":\"b\",\"c\":\"red\",\"f\":[\":'\",\">\",\"(\"]}]/qq/Happy(a)|not Happy(b)|The possible situation is a counterexample to the argument",
            "/ex/TorF/from/LargerThan(a,b)/to/not SameShape(a,b)/world/[{\"x\":3,\"y\":0,\"w\":3,\"h\":3,\"n\":\"a\",\"c\":\"white\",\"f\":[\":\",\"-\",\")\"]},{\"x\":7,\"y\":0,\"w\":2,\"h\":2,\"n\":\"b\",\"c\":\"red\",\"f\":[\":'\",\">\",\"(\"]}]/qq/LargerThan(a,b)|not SameShape(a,b)|The possible situation is a counterexample to the argument",
            "/ex/q/define ‘counterexample’",
            "/ex/create/from/LeftOf(a,b)|RightOf(b,c)/to/LeftOf(a,c)",
            "/ex/create/from/LeftOf(a,b)|Adjacent(b,c)/to/LeftOf(a,c)"
          ]
        },
        {
          "type": "unit",
          "name": "Identity",
          "slides": "http://logic-1.butterfill.com/units/unit_06.html",
          "rawReading": [
            "2.2"
          ],
          "rawExercises": [
            "/ex/create/orValid/from/White(a)|a=b/to/White(b)",
            "/ex/create/orValid/from/a=b|b=c/to/a=c",
            "/ex/create/orValid/from/LeftOf(a,b)|b=c/to/LeftOf(a,c)",
            "/ex/create/orValid/from/SameSize(a,b)/to/a=b",
            "/ex/create/orValid/from/a=b/to/SameSize(a,b)",
            "/ex/create/orValid/from/SameSize(a,b)|SameShape(a,b)/to/a=b"
          ]
        },
        {
          "type": "unit",
          "name": "Truth Tables",
          "slides": "http://logic-1.butterfill.com/units/unit_071.html",
          "rawReading": [
            "3.1",
            "3.2",
            "3.3"
          ],
          "rawExercises": [
            "/ex/tt/noQ/qq/A and B",
            "/ex/tt/noQ/qq/A or B",
            "/ex/tt/noQ/qq/not A",
            "/ex/TorF/world/[{\"x\":9,\"y\":0,\"w\":2,\"h\":2,\"n\":\"a\",\"c\":\"white\",\"f\":[\"}:\",\"^\",\"D\"]},{\"x\":0,\"y\":0,\"w\":2,\"h\":2,\"n\":\"b\",\"c\":\"pink\",\"f\":[\":'\",\"-\",\"D\"]},{\"x\":4,\"y\":0,\"w\":2,\"h\":2,\"n\":\"\",\"c\":\"purple\",\"f\":[\":'\",\"-\",\"(\"]}]/qq/Happy(a)|not Happy(b)|Happy(a) or Happy(b)",
            "/ex/TorF/world/[{\"x\":9,\"y\":0,\"w\":2,\"h\":2,\"n\":\"a\",\"c\":\"white\",\"f\":[\"}:\",\"^\",\"D\"]},{\"x\":0,\"y\":0,\"w\":2,\"h\":2,\"n\":\"b\",\"c\":\"pink\",\"f\":[\":'\",\"-\",\"D\"]},{\"x\":4,\"y\":0,\"w\":2,\"h\":2,\"n\":\"\",\"c\":\"purple\",\"f\":[\":'\",\"-\",\"(\"]}]/qq/Happy(a)|not Happy(b)|not not Happy(a)|not not not Happy(a)|not not not not Happy(a)",
            "/ex/create/qq/Laughing(c)|Frowning(d)",
            "/ex/TorF/world/[{\"x\":4,\"y\":0,\"w\":2,\"h\":2,\"n\":\"c\",\"c\":\"cyan\",\"f\":[\":\",\">\",\"D\"]},{\"x\":7,\"y\":0,\"w\":2,\"h\":2,\"n\":\"d\",\"c\":\"orange\",\"f\":[\"}:\",\"-\",\"|\"]}]/qq/Laughing(c)|Frowning(d)|Laughing(c) and Frowning(d)|Laughing(c) or Frowning(d)",
            "/ex/TorF/world/[{\"x\":4,\"y\":0,\"w\":2,\"h\":2,\"n\":\"c\",\"c\":\"cyan\",\"f\":[\":\",\">\",\"D\"]},{\"x\":7,\"y\":0,\"w\":2,\"h\":2,\"n\":\"d\",\"c\":\"orange\",\"f\":[\"}:\",\"-\",\"|\"]}]/qq/Frowning(d)|not Frowning(d)|Laughing(c) and not Frowning(d)|not (Laughing(c) and not Frowning(d))"
          ]
        },
        {
          "type": "unit",
          "name": "Complex Truth Tables",
          "slides": "http://logic-1.butterfill.com/units/unit_09.html",
          "rawReading": [
            "3.3",
            "3.5"
          ],
          "rawExercises": [
            "/ex/tt/qq/(A and B) or C",
            "/ex/tt/qq/A and (B or C)",
            "/ex/create/qq/(Happy(a) and Happy(b)) or Happy(c)|not (Happy(a) and (Happy(b) or Happy(c)))",
            "/ex/tt/qq/not (A and B)",
            "/ex/tt/qq/A|not not A",
            "/ex/trans/domain/Tobin/names/a=Tobin/predicates/Ugly1/sentence/not not Ugly(a)",
            "/ex/tt/qq/not (A or B)|not A or not B",
            "/ex/trans/domain/Tobin|Suzi/names/a=Tobin|b=Suzi/predicates/Ugly1|Inept1/sentence/not (Ugly(a) or Inept(b))",
            "/ex/tt/qq/not (A or B)|not A and not B",
            "/ex/trans/domain/Tobin|Suzi/names/a=Tobin|b=Suzi/predicates/Musician1-x-is-a-musician/sentence/It’s false that Tobin and Suzi are both musicians",
            "/ex/trans/domain/Tobin|Suzi/names/a=Tobin|b=Suzi/predicates/Ugly1|Inept1/sentence/It’s false that Tobin is ugly and Suzi inept",
            "/ex/trans/domain/Tobin|Suzi/names/a=Tobin|b=Suzi/predicates/Musicial1/sentence/It’s false that Tobin isn’t musical and Suzi isn’t musical",
            "/ex/tt/qq/not (not A and not B)|(A and B)",
            "/ex/create/from/not (not Happy(a) and not Happy(b))/to/(Happy(a) and Happy(b))"
          ]
        },
        {
          "type": "unit",
          "name": "Logical Validity and Truth Tables",
          "slides": "http://logic-1.butterfill.com/units/unit_14.html",
          "rawReading": [
            "4.3"
          ],
          "rawExercises": [
            "/ex/tt/from/A or B|not A/to/B",
            "/ex/tt/from/A or B|B/to/not A",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/Happy1|Sad1/sentence/not Happy(a) or not Happy(b)",
            "/ex/tt/from/not A or not B|A/to/not B",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/Happy1|Sad1/sentence/not (Happy(a) or Happy(b))",
            "/ex/tt/from/not (A or B)/to/not A",
            "/ex/tt/from/not (A and B)/to/not A",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/Frowning1|Laughing1/sentence/It’s not true that Ayesha is frowning or Beatrice is laughing",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/Frowning1|Laughing1/sentence/Ayesha isn’t frowning or Beatrice isn’t laughing"
          ]
        },
        {
          "type": "unit",
          "name": "Contradictions, Logical Truths and Logical Possibilities",
          "slides": "http://logic-1.butterfill.com/units/unit_065.html",
          "rawReading": [
            "2.2"
          ],
          "rawExercises": [
            "/ex/tt/qq/A or not A",
            "/ex/tt/qq/A and not A",
            "/ex/tt/qq/A or A"
          ]
        },
        {
          "type": "unit",
          "name": "Contradictions, Logical Truths and Logical Validity",
          "slides": "http://logic-1.butterfill.com/units/unit_160.html",
          "rawReading": [
            "4.1",
            "4.2",
            "5.4"
          ],
          "rawExercises": [
            "/ex/tt/qq/A or not A",
            "/ex/tt/qq/(A or B) or not A",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/Frowning1|Sad1/sentence/Ayesha and Beatrice are both sad or Ayesha is frowning",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/Frowning1|Sad1/sentence/Frowning(b) and (Sad(a) or Frowning(a))",
            "/ex/tt/qq/(A and B) or not A",
            "/ex/tt/qq/(A and B) and not A"
          ]
        },
        {
          "type": "unit",
          "name": "The Storm Clouds on the Horizon Were Getting Nearly Directly Overhead",
          "slides": "http://logic-1.butterfill.com/units/unit_162.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/TorF/from/The storm clouds on the horizon were getting nearly directly overhead/to/those who enter the country illegally violate the law/qq/the argument is valid|the argument is sound",
            "/ex/TorF/qq/If there’s no possible situation in which the premises of an argument are all true, it must be logically valid|If there is no possible situation in which the conclusion of an argument is false, it must be logically valid",
            "/ex/TorF/qq/If there’s no possible situation in which the premises of an argument are all true, it cannot be logically valid|If there’s no possible situation in which the premises of an argument are all false, it must be logically valid|If there’s no possible situation in which the premises of an argument are all false, it cannot be logically valid"
          ]
        }
      ]
    },
    {
      "type": "lecture",
      "name": "Fast Lecture 02",
      "slides": "http://logic-1.butterfill.com/fastlecture_02.html",
      "handout": "http://logic-1.butterfill.com/handouts/fastlecture_02.handout.pdf",
      "units": [
        {
          "type": "unit",
          "name": "Formal Proof: ∧Elim and ∧Intro",
          "slides": "http://logic-1.butterfill.com/units/unit_21.html",
          "rawReading": [
            "5.1",
            "6.1"
          ],
          "rawExercises": [
            "/ex/proof/from/A and B/to/A",
            "/ex/proof/from/A|B/to/A and B",
            "/ex/proof/from/Happy(a) and Sad(b)|Sad(b) and Confused(c)/to/Happy(a) and Confused(c)"
          ]
        },
        {
          "type": "unit",
          "name": "∧Intro and ∨Intro: Compare and Contrast",
          "slides": "http://logic-1.butterfill.com/units/unit_212.html",
          "rawReading": [
            "6.1"
          ],
          "rawExercises": [
            "/ex/proof/from/A/to/A or B",
            "/ex/proof/from/A and B/to/B or C",
            "/ex/proof/from/A|C/to/A and (B or C)"
          ]
        },
        {
          "type": "unit",
          "name": "Rules of Proof for Identity",
          "slides": "http://logic-1.butterfill.com/units/unit_110.html",
          "rawReading": [
            "2.2"
          ],
          "rawExercises": [
            "/ex/proof/from/Happy(a)|a=b/to/Happy(b)",
            "/ex/proof/from/LeftOf(a,b)|b=c/to/LeftOf(a,c)",
            "/ex/proof/from/a=b|b=c/to/a=c",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/Frowning1/sentence/a=b",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/Frowning1/sentence/Ayesha isn’t Beatrice",
            "/ex/proof/from/LeftOf(a,b)|Happy(b)|a=b/to/LeftOf(b,a) and Happy(a)"
          ]
        },
        {
          "type": "unit",
          "name": "DeMorgan: ¬(A ∧ B) ⫤⊨ ¬A ∨ ¬B",
          "slides": "http://logic-1.butterfill.com/units/unit_235.html",
          "rawReading": [
            "3.6",
            "4.2"
          ],
          "rawExercises": [
            "/ex/tt/qq/not (A and not B) or not C|not (not A or (B or not C))",
            "/ex/create/orValid/from/not (Happy(a) and not Sad(b)) or not Laughing(c)/to/not (not Happy(a) or (Sad(b) or not Laughing(c)))",
            "/ex/create/orValid/from/not (not Happy(a) or (Sad(b) or not Laughing(c)))/to/not (Happy(a) and not Sad(b)) or not Laughing(c)"
          ]
        },
        {
          "type": "unit",
          "name": "→Intro, →Elim",
          "slides": "http://logic-1.butterfill.com/units/unit_390.html",
          "rawReading": [
            "8.1",
            "8.2"
          ],
          "rawExercises": [
            "/ex/create/qq/Happy(a)|Happy(a) arrow Happy(b)",
            "/ex/proof/from/A and C|A arrow B/to/B",
            "/ex/proof/from/A arrow B|B arrow C/to/A arrow C",
            "/ex/proof/from/-/to/A arrow A",
            "/ex/proof/from/A|A arrow false/to/B",
            "/ex/proof/from/A arrow not A|A/to/false"
          ]
        },
        {
          "type": "unit",
          "name": "→Intro: An Example",
          "slides": "http://logic-1.butterfill.com/units/unit_391.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/proof/from/-/to/A arrow (B arrow A)",
            "/ex/proof/from/-/to/not A arrow (A arrow B)",
            "/ex/create/orValid/from/Sad(a) arrow Sad(c)/to/(Sad(a) and Sad(b)) arrow Sad(c)",
            "/ex/proof/orInvalid/from/Sad(a) arrow Sad(c)/to/(Sad(a) and Sad(b)) arrow Sad(c)",
            "/ex/create/orValid/from/Tall(a) arrow Tall(c)/to/(Tall(a) or Tall(b)) arrow Tall(c)",
            "/ex/proof/orInvalid/from/Tall(a) arrow Tall(c)/to/(Tall(a) or Tall(b)) arrow Tall(c)",
            "/ex/proof/from/A or B/to/not A arrow B",
            "/ex/proof/from/A arrow not B/to/B arrow (A arrow C)"
          ]
        },
        {
          "type": "unit",
          "name": "∨Elim: An Example",
          "slides": "http://logic-1.butterfill.com/units/unit_221.html",
          "rawReading": [
            "5.2",
            "6.2"
          ],
          "rawExercises": [
            "/ex/proof/from/A or B/to/B or A",
            "/ex/proof/orInvalid/from/A or B|not A/to/B",
            "/ex/proof/orInvalid/from/A or B|A/to/not B",
            "/ex/proof/orInvalid/from/A and B|not A/to/B",
            "/ex/proof/orInvalid/from/A and (B or C)/to/(A and C) or (A and B)",
            "/ex/proof/orInvalid/from/(A and B) or (C and D)/to/B or C"
          ]
        },
        {
          "type": "unit",
          "name": "¬, ⊥",
          "slides": "http://logic-1.butterfill.com/units/unit_270.html",
          "rawReading": [
            "6.3"
          ],
          "rawExercises": [
            "/ex/tt/from/false/to/A",
            "/ex/proof/from/false/to/A",
            "/ex/tt/from/A|not A/to/false",
            "/ex/proof/from/Tall(a) and not Tall(a)/to/false",
            "/ex/proof/from/Tall(a)|not Tall(b)|a=b/to/false",
            "/ex/create/orInconsistent/qq/Tall(a)|not Tall(b)|a=b",
            "/ex/proof/from/Tall(a) or Happy(a)|not (Tall(a) or Happy(a))/to/Tall(a) and Happy(a)"
          ]
        },
        {
          "type": "unit",
          "name": "¬Elim",
          "slides": "http://logic-1.butterfill.com/units/unit_280.html",
          "rawReading": [
            "6.3"
          ],
          "rawExercises": [
            "/ex/tt/from/not not A/to/A",
            "/ex/proof/from/not not A/to/A",
            "/ex/proof/from/not not A and B/to/A"
          ]
        },
        {
          "type": "unit",
          "name": "¬Intro",
          "slides": "http://logic-1.butterfill.com/units/unit_281.html",
          "rawReading": [
            "5.3",
            "6.3"
          ],
          "rawExercises": [
            "/ex/proof/from/A/to/not not A",
            "/ex/proof/from/A arrow B|not B/to/not A",
            "/ex/proof/from/not A/to/not (A and B)",
            "/ex/proof/from/not (A and B)|A/to/not B",
            "/ex/proof/from/not (A arrow B)/to/A",
            "/ex/proof/from/not (A arrow B)/to/B"
          ]
        }
      ]
    },
    {
      "type": "lecture",
      "name": "Fast Lecture 03",
      "slides": "http://logic-1.butterfill.com/fastlecture_03.html",
      "handout": "http://logic-1.butterfill.com/handouts/fastlecture_03.handout.pdf",
      "units": [
        {
          "type": "unit",
          "name": "A ∧ B ∨ C: They Are Different",
          "slides": "http://logic-1.butterfill.com/units/unit_154.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/tt/qq/(A and B) or C|A and (B or C)",
            "/ex/create/orValid/from/(Happy(a) and Happy(b)) or Happy(c)/to/Happy(a) and (Happy(b) or Happy(c))",
            "/ex/create/orValid/from/Happy(a) and (Happy(b) or Happy(c))/to/(Happy(a) and Happy(b)) or Happy(c)",
            "/ex/trans/domain/Ayesha|Beatrice|Caitlyn/names/a=Ayesha|b=Beatrice|c=Caitlyn/predicates/Happy1/sentence/(Happy(a) and Happy(b)) or Happy(c)",
            "/ex/trans/domain/Ayesha|Beatrice|Caitlyn/names/a=Ayesha|b=Beatrice|c=Caitlyn/predicates/Happy1/sentence/Happy(a) and (Happy(b) or Happy(c))",
            "/ex/trans/domain/Ayesha/names/a=Ayesha/predicates/Happy1|Frowning1|Crying1/sentence/Ayesha is happy; and she is frowning or crying",
            "/ex/trans/domain/Ayesha/names/a=Ayesha/predicates/Happy1|Frowning1|Crying1/sentence/Ayesha is happy and frowning; or Ayesha is crying",
            "/ex/create/qq/Wide(a)|Tall(b)",
            "/ex/tt/qq/not (A and B)|not A or not B",
            "/ex/create/orInconsistent/qq/not (Happy(a) and Wide(a))|not Happy(a) or not Wide(a)",
            "/ex/trans/domain/Ayesha/names/a=Ayesha/predicates/Happy1|Wide1/sentence/not (Happy(a) and Wide(a))",
            "/ex/trans/domain/Ayesha/names/a=Ayesha/predicates/Happy1|Wide1/sentence/Ayesha is not happy or not wide",
            "/ex/create/qq/not (Wide(a) and not Tall(b))",
            "/ex/tt/qq/not (A and not B)|not A or B",
            "/ex/trans/domain/Ayesha/names/a=Ayesha/predicates/Happy1|Wide1/sentence/not (A and not B)",
            "/ex/create/orValid/from/not (Happy(a) and not Wide(a))/to/not Happy(a) or Wide(a)",
            "/ex/create/orValid/from/not Happy(a) or Wide(a)/to/not (Happy(a) and not Wide(a))",
            "/ex/trans/domain/Ayesha/names/a=Ayesha/predicates/Sad1|Happy1/sentence/Ayesha is sad or not happy",
            "/ex/trans/domain/Ayesha/names/a=Ayesha/predicates/Happy1|Wide1/sentence/not (Happy(a) and not Wide(a))"
          ]
        },
        {
          "type": "unit",
          "name": "The Syntax of awFOL",
          "slides": "http://logic-1.butterfill.com/units/unit_230.html",
          "rawReading": [
            "9.3"
          ],
          "rawExercises": [
            "/ex/tt/qq/(A and B) or C|A and (B or C)",
            "/ex/tt/qq/(A arrow B) arrow C|A arrow (B arrow C)",
            "/ex/proof/orInvalid/from/not A and B/to/not (A and B)",
            "/ex/proof/orInvalid/from/not (A and B)/to/not A and B"
          ]
        },
        {
          "type": "unit",
          "name": "Truth-functional Connectives",
          "slides": "http://logic-1.butterfill.com/units/unit_072.html",
          "rawReading": [
            "7.0 (the text before §7.1)"
          ],
          "rawExercises": [
            "/ex/q/Explain why ‘Ayesha said that ...’ is not a truth-functional connective",
            "/ex/TorF/qq/conjunction (‘∧’) is a truth-functional connective|‘Because’ is a truth-functional connective|‘Maybe’ (as in ‘Maybe Elvis lives’) is a truth-functional connective|‘Certainly’ (as in ‘Certainly, fish swim’) is a truth-functional connective|‘Probably’ (as in ‘Probably, it will rain’) is a truth-functional connective|Identity (‘=’) is a truth-functional connective"
          ]
        },
        {
          "type": "unit",
          "name": "Subproofs Are Tricky",
          "slides": "http://logic-1.butterfill.com/units/unit_224.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/proof/orInvalid/from/A or B/to/B or A",
            "/ex/proof/orInvalid/from/A or B/to/B and A"
          ]
        }
      ]
    },
    {
      "type": "lecture",
      "name": "Fast Lecture 04",
      "slides": "http://logic-1.butterfill.com/fastlecture_04.html",
      "handout": "http://logic-1.butterfill.com/handouts/fastlecture_04.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Fast Lecture 05",
      "slides": "http://logic-1.butterfill.com/fastlecture_05.html",
      "handout": "http://logic-1.butterfill.com/handouts/fastlecture_05.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Fast Lecture 06",
      "slides": "http://logic-1.butterfill.com/fastlecture_06.html",
      "handout": "http://logic-1.butterfill.com/handouts/fastlecture_06.handout.pdf",
      "units": [
        {
          "type": "unit",
          "name": "There Does Not Exist",
          "slides": "http://logic-1.butterfill.com/units/unit_605.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/trans/domain/people/names/a=Ayesha/predicates/Happy1/sentence/Ayesha is happy",
            "/ex/trans/domain/people/names/-/predicates/Happy1/sentence/Someone is happy",
            "/ex/trans/domain/people/names/a=Ayesha/predicates/Happy1|Crying1/sentence/Ayesha is happy and crying",
            "/ex/trans/domain/people/names/-/predicates/Happy1|Crying1/sentence/Someone is happy and crying",
            "/ex/trans/domain/people/names/-/predicates/Happy1|Crying1/sentence/Someone is neither happy nor crying",
            "/ex/create/qq/exists (x) Crying(x)",
            "/ex/create/orValid/from/exists (x) (Happy(x) and Crying(x))/to/Happy(a) and Crying(a)",
            "/ex/trans/domain/people/names/-/predicates/Happy1/sentence/Someone is not happy",
            "/ex/trans/domain/people/names/-/predicates/Happy1/sentence/No one is happy",
            "/ex/trans/domain/people/names/-/predicates/Broken1/sentence/Everyone is not broken",
            "/ex/trans/domain/people/names/-/predicates/Broken1/sentence/Not everything is broken",
            "/ex/proof/orInvalid/from/not exists x Dead(x)/to/exists x not Dead(x)",
            "/ex/proof/orInvalid/from/exists x not Dead(x)/to/not exists x Dead(x)",
            "/ex/create/orValid/from/not exists x Happy(x)/to/exists x not Happy(x)",
            "/ex/create/orValid/from/exists x not Happy(x)/to/not exists x Happy(x)"
          ]
        },
        {
          "type": "unit",
          "name": "↔ : truth tables and rules",
          "slides": "http://logic-1.butterfill.com/units/unit_567.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/tt/qq/A ↔ B",
            "/ex/tt/from/A ↔ B/to/A arrow B",
            "/ex/tt/qq/(A arrow B) ↔ not (A and not B)",
            "/ex/proof/from/A ↔ B/to/B arrow A",
            "/ex/proof/from/(not A or B)|(B arrow A)/to/A ↔ B"
          ]
        }
      ]
    },
    {
      "type": "lecture",
      "name": "Fast Lecture 07",
      "slides": "http://logic-1.butterfill.com/fastlecture_07.html",
      "handout": "http://logic-1.butterfill.com/handouts/fastlecture_07.handout.pdf",
      "units": []
    }
  ]
}
