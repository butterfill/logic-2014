{
  "courseName": "UK_W20_PH126",
  "variant": "normal-normal",
  "description": "These exercises are aimed at students who did not take a mathematical subject at A-Level or equivalent. They are linked to the ‘normal’ lectures.",
  "lectures": [
    {
      "type": "lecture",
      "name": "Lecture 01",
      "slides": "http://logic-1.butterfill.com/lecture_01.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_01.handout.pdf",
      "units": [
        {
          "type": "unit",
          "name": "The Pigs of Logic",
          "slides": "http://logic-1.butterfill.com/units/unit_01.html",
          "rawReading": [
            "1.1",
            "1.2",
            "2.1"
          ],
          "rawExercises": [
            "/ex/q/define ‘logically valid argument’",
            "/ex/TorF/from/Either the pig went up the left fork or it went up the right fork|The pig didn’t go up the left fork/to/The pig went up the right fork/qq/The argument is logically valid",
            "/ex/TorF/from/A or B|not A/to/B/qq/The argument is logically valid",
            "/ex/TorF/from/The pig didn’t go up the left fork/to/The pig went up the right fork/qq/The argument is logically valid",
            "/ex/TorF/from/not A/to/B/qq/The argument is logically valid"
          ]
        },
        {
          "type": "unit",
          "name": "Quick Intro to FOL",
          "slides": "http://logic-1.butterfill.com/units/unit_02.html",
          "rawReading": [
            "1.1",
            "1.2",
            "1.3"
          ],
          "rawExercises": [
            "/ex/TorF/qq/in the sentence ‘John is square or Ayesha is triangular’, the word ‘John’ is a name|in the same sentence, ‘square’ is a predicate|in the same sentence, ‘square’ is a connective|in the same sentence, ‘or’ is a predicate|in the same sentence, ‘or’ is a connective",
            "/ex/TorF/qq/‘Many more people have been to Paris than you have’ is false|‘Many more people have been to Paris than you have’ is true",
            "/ex/TorF/qq/‘Ayesha cries’ is an atomic sentence|‘Ayesha cries or Beatrice weeps’ is a non-atomic sentence|‘People come and people go’ is a non-atomic sentence",
            "/ex/q/What is an atomic sentence?",
            "/ex/TorF/qq/‘John is square’ is a non-atomic sentence|‘John is square or Ayesha is triangular’ is a non-atomic sentence|‘John is square because Ayesha is triangular’ is a non-atomic sentence|‘Necessarily, John is square’ is a non-atomic sentence",
            "/ex/create/qq/White(a)",
            "/ex/create/qq/not White(a)",
            "/ex/create/qq/not White(a)|Happy(a)",
            "/ex/create/qq/not White(a)|Happy(a)|Sad(b)",
            "/ex/create/qq/not White(a)|Happy(a)|Sad(b)|LeftOf(b,a)",
            "/ex/create/qq/not White(a)|Happy(a)|Sad(b)|LeftOf(b,a)|TallerThan(b,a)",
            "/ex/create/qq/not White(a)|Happy(a)|Sad(b)|LeftOf(b,a)|TallerThan(a,b)|SameSize(a,b)",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha/predicates/White1/sentence/Ayesha is white",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha/predicates/White1/sentence/Ayesha is not white",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha/predicates/White1|Happy1/sentence/Ayesha is happy",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/White1|Happy1|Sad1/sentence/Beatrice is sad",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/White1|Happy1|Sad1/sentence/Beatrice is not sad",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/White1|Happy1|Sad1|LeftOf2-x-is-left-of-y/sentence/Beatrice is left of Ayesha",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/White1|Happy1|Sad1|LeftOf2-x-is-left-of-y/sentence/Ayesha is left of Beatrice",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/White1|Happy1|Sad1|LeftOf2-x-is-left-of-y|TallerThan2-x-is-taller-than-y/sentence/Ayesha is taller than Beatrice",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/White1|Happy1|Sad1|LeftOf2-x-is-left-of-y|TallerThan2-x-is-taller-than-y|WiderThan2-x-is-wider-than-y/sentence/Beatrice is wider than Ayesha",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/Yellow1/sentence/Yellow(a)",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/Yellow1|Red1/sentence/Red(b)",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/Yellow1|Red1/sentence/Yellow(a) or Red(b)",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/Yellow1|Red1|Adjacent2-x-is-adjacent-to-y/sentence/Adjacent(a,b)",
            "/ex/trans/domain/Ayesha|Beatrice/names/a=Ayesha|b=Beatrice/predicates/Yellow1|Red1|Adjacent2-x-is-adjacent-to-y/sentence/not Adjacent(a,b)"
          ]
        },
        {
          "type": "unit",
          "name": "Logically Valid Arguments",
          "slides": "http://logic-1.butterfill.com/units/unit_03.html",
          "rawReading": [
            "2.1"
          ],
          "rawExercises": [
            "/ex/TorF/qq/a logically valid argument cannot have a false conclusion|a logically valid argument cannot have false premises",
            "/ex/TorF/from/Ayesha is a fish|Ayesha cannot swim/to/Ayesha is a fish who cannot swim/qq/The argument is logically valid",
            "/ex/TorF/from/Ayesha is a fish|Beatrice is not a fish/to/Ayesha isn’t Beatrice/qq/The argument is logically valid",
            "/ex/TorF/from/Most fish swim|Ayesha is a fish/to/Ayesha swims/qq/The argument is logically valid",
            "/ex/TorF/from/All fish swim|Ayesha is a fish/to/Ayesha swims/qq/The argument is logically valid",
            "/ex/TorF/from/If Beatrice is a fish, she can swim|Beatrice is a fish/to/Beatrice can swim/qq/The argument is logically valid",
            "/ex/TorF/from/If Ayesha is a bird, she can fly|Ayesha can fly/to/Ayesha is a bird/qq/The argument is logically valid",
            "/ex/TorF/from/Ayesha can fly|Beatrice can swim/to/Ayesha isn’t Beatrice/qq/The argument is logically valid",
            "/ex/TorF/from/Ayesha is a big squirrel|All squirrels are animals/to/Ayesha is a big animal/qq/The argument is logically valid",
            "/ex/TorF/qq/a logically valid argument can have true premises and a true conclusion|a logically valid argument can have true premises and a false conclusion|a logically valid argument can have false premises and a true conclusion|a logically valid argument can have false premises and a false conclusion"
          ]
        },
        {
          "type": "unit",
          "name": "Counterexamples",
          "slides": "http://logic-1.butterfill.com/units/unit_04.html",
          "rawReading": [
            "2.5"
          ],
          "rawExercises": [
            "/ex/create/from/TallerThan(a,b)/to/WiderThan(a,b)",
            "/ex/create/from/Adjacent(a,b)|Adjacent(b,c)/to/Adjacent(a,c)",
            "/ex/create/from/SameShape(a,b)/to/SameSize(a,b)",
            "/ex/create/from/SameSize(a,b)/to/SameShape(a,b)",
            "/ex/TorF/from/Happy(a) or Happy(b)|Happy(a)/to/not Happy(b)/world/[{\"x\":9,\"y\":0,\"w\":2,\"h\":2,\"n\":\"a\",\"c\":\"white\",\"f\":[\"}:\",\"^\",\"D\"]},{\"x\":0,\"y\":0,\"w\":2,\"h\":2,\"n\":\"b\",\"c\":\"pink\",\"f\":[\":'\",\"-\",\"D\"]},{\"x\":4,\"y\":0,\"w\":2,\"h\":2,\"n\":\"\",\"c\":\"purple\",\"f\":[\":'\",\"-\",\"(\"]}]/qq/Happy(a) or Happy(b)|Happy(a)|not Happy(b)|The possible situation is a counterexample to the argument",
            "/ex/TorF/from/Happy(a)/to/not Happy(b)/world/[{\"x\":3,\"y\":0,\"w\":3,\"h\":3,\"n\":\"a\",\"c\":\"white\",\"f\":[\":\",\"-\",\")\"]},{\"x\":7,\"y\":0,\"w\":2,\"h\":2,\"n\":\"b\",\"c\":\"red\",\"f\":[\":'\",\">\",\"(\"]}]/qq/Happy(a)|not Happy(b)|The possible situation is a counterexample to the argument",
            "/ex/TorF/from/LargerThan(a,b)/to/not SameShape(a,b)/world/[{\"x\":3,\"y\":0,\"w\":3,\"h\":3,\"n\":\"a\",\"c\":\"white\",\"f\":[\":\",\"-\",\")\"]},{\"x\":7,\"y\":0,\"w\":2,\"h\":2,\"n\":\"b\",\"c\":\"red\",\"f\":[\":'\",\">\",\"(\"]}]/qq/LargerThan(a,b)|not SameShape(a,b)|The possible situation is a counterexample to the argument",
            "/ex/q/define ‘counterexample’",
            "/ex/create/from/LeftOf(a,b)|RightOf(b,c)/to/LeftOf(a,c)",
            "/ex/create/from/LeftOf(a,b)|Adjacent(b,c)/to/LeftOf(a,c)",
            "/ex/create/orValid/from/LeftOf(a,b)|LeftOf(b,c)/to/LeftOf(a,c)",
            "/ex/create/orValid/from/SameSize(a,b)|SameShape(b,c)/to/SameSize(a,c)",
            "/ex/create/orValid/from/not LeftOf(a,b)|not LeftOf(b,a)/to/a=b"
          ]
        }
      ]
    },
    {
      "type": "lecture",
      "name": "Lecture 02",
      "slides": "http://logic-1.butterfill.com/lecture_02.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_02.handout.pdf",
      "units": [
        {
          "type": "unit",
          "name": "Complex Truth Tables",
          "slides": "http://logic-1.butterfill.com/units/unit_60.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/tt/qq/not (A and B)",
            "/ex/tt/qq/A and (B or C)"
          ]
        }
      ]
    },
    {
      "type": "lecture",
      "name": "Lecture 03",
      "slides": "http://logic-1.butterfill.com/lecture_03.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_03.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Lecture 04",
      "slides": "http://logic-1.butterfill.com/lecture_04.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_04.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Lecture 05",
      "slides": "http://logic-1.butterfill.com/lecture_05.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_05.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Lecture 06",
      "slides": "http://logic-1.butterfill.com/lecture_06.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_06.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Lecture 07",
      "slides": "http://logic-1.butterfill.com/lecture_07.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_07.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Lecture 08",
      "slides": "http://logic-1.butterfill.com/lecture_08.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_08.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Lecture 09",
      "slides": "http://logic-1.butterfill.com/lecture_09.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_09.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Lecture 10",
      "slides": "http://logic-1.butterfill.com/lecture_10.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_10.handout.pdf",
      "units": [
        {
          "type": "unit",
          "name": "↔ : truth tables and rules",
          "slides": "http://logic-1.butterfill.com/units/unit_567.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/tt/qq/A ↔ B",
            "/ex/tt/from/A ↔ B/A arrow B",
            "/ex/tt/qq/(A arrow B) ↔ not (A and not B)",
            "/ex/proof/from/A ↔ B/to/B arrow A",
            "/ex/proof/from/(not A or B)|(B arrow A)/to/A ↔ B"
          ]
        },
        {
          "type": "unit",
          "name": "There Does Not Exist",
          "slides": "http://logic-1.butterfill.com/units/unit_605.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/trans/domain/people/names/a=Ayesha/predicates/Happy1/sentence/Ayesha is happy",
            "/ex/trans/domain/people/names/-/predicates/Happy1/sentence/Someone is happy",
            "/ex/trans/domain/people/names/a=Ayesha/predicates/Happy1|Crying1/sentence/Ayesha is happy and crying",
            "/ex/trans/domain/people/names/-/predicates/Happy1|Crying1/sentence/Someone is happy and crying",
            "/ex/trans/domain/people/names/-/predicates/Happy1|Crying1/sentence/Someone is neither happy nor crying",
            "/ex/create/qq/exists (x) Crying(x)",
            "/ex/create/orValid/from/exists (x) (Happy(x) and Crying(x))/to/Happy(a) and Crying(a)",
            "/ex/trans/domain/people/names/-/predicates/Happy1/sentence/Someone is not happy",
            "/ex/trans/domain/people/names/-/predicates/Happy1/sentence/No one is happy",
            "/ex/trans/domain/people/names/-/predicates/Broken1/sentence/Everyone is not broken",
            "/ex/trans/domain/people/names/-/predicates/Broken1/sentence/Not everything is broken",
            "/ex/proof/orInvalid/from/not exists x Dead(x)/to/exists x not Dead(x)",
            "/ex/proof/orInvalid/from/exists x not Dead(x)/to/not exists x Dead(x)",
            "/ex/create/orValid/from/not exists x Happy(x)/to/exists x not Happy(x)",
            "/ex/create/orValid/from/exists x not Happy(x)/to/not exists x Happy(x)"
          ]
        }
      ]
    },
    {
      "type": "lecture",
      "name": "Lecture 11",
      "slides": "http://logic-1.butterfill.com/lecture_11.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_11.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Lecture 12",
      "slides": "http://logic-1.butterfill.com/lecture_12.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_12.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Lecture 13",
      "slides": "http://logic-1.butterfill.com/lecture_13.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_13.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Lecture 14",
      "slides": "http://logic-1.butterfill.com/lecture_14.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_14.handout.pdf",
      "units": [
        {
          "type": "unit",
          "name": "Somebody Is Not Dead",
          "slides": "http://logic-1.butterfill.com/units/unit_607.html",
          "rawReading": [],
          "rawExercises": [
            "/ex/trans/domain/things/names/-/predicates/Broken1/sentence/Everything is not broken",
            "/ex/trans/domain/things/names/-/predicates/Broken1/sentence/Not everything is broken",
            "/ex/trans/domain/things/names/-/predicates/Broken1|Red1/sentence/Not everything red is broken",
            "/ex/trans/domain/things/names/-/predicates/Broken1|Red1/sentence/Everything red is not broken"
          ]
        }
      ]
    },
    {
      "type": "lecture",
      "name": "Lecture 15",
      "slides": "http://logic-1.butterfill.com/lecture_15.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_15.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Lecture 16",
      "slides": "http://logic-1.butterfill.com/lecture_16.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_16.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Lecture 17",
      "slides": "http://logic-1.butterfill.com/lecture_17.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_17.handout.pdf",
      "units": []
    },
    {
      "type": "lecture",
      "name": "Lecture 18",
      "slides": "http://logic-1.butterfill.com/lecture_18.html",
      "handout": "http://logic-1.butterfill.com/handouts/lecture_18.handout.pdf",
      "units": []
    }
  ]
}
